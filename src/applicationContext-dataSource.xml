<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- 数据源-MYSQL -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/shell?characterEncoding=utf-8"/>
		<property name="username" value="root"/>
		<property name="password" value="mysql"/>
		<property name="maxIdle" value="20"/>
		<property name="maxActive" value="200"/>
	</bean>

    <!-- hibernate之sessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>	
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
		<!-- 这种方式可以免去每次添加一个实体类，都要新增一条映射文件的麻烦 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/shell/framework/model</value>
			</list>
		</property>
	</bean>

	<!-- hibernate事务管理器 -->
	<bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- hibernate事务模板 抽象bean，不会被实例化-->
	<bean id="hibernateTransactionTemplate" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property name="transactionManager">
			<ref local="hibernateTransactionManager"/>
		</property>

		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- 
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="hibernateTemplate" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyTargetClass">
			<value>true</value>
		</property>
	</bean>
	 -->
	
	<!-- 基础dao层hibernate实现 -->
	<bean id="baseDaoTemplate.Hibernate" class="shell.framework.dao.impl.HibernateBaseDaoTemplate">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

	<!-- 基础dao层的jdbc实现 -->
	<bean id="baseDaoTemplate.Jdbc" class="shell.framework.dao.impl.JdbcBaseDaoTemplate">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
	</bean>

    <!-- 基础dao层的mybatis实现 -->
    <bean id="baseDaoTemplate.Mybatis" class="shell.framework.dao.impl.MybatisBaseDaoTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!-- mybatis之sessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:shell/framework/mapper/*.xml" />
    </bean>
    <!-- 自动扫描shell.framework.mapper包下的映射器接口，并自动创建MapperFactoryBean，来创建基于接口的映射器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="shell.framework.mapper" />
    </bean>



</beans>